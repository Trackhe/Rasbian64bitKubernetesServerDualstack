---
- name: Install Worker Nodes.
  hosts: worker
  gather_facts: true
  become: yes
  become_method: sudo
  become_user: root
  tasks:
    - name: Install a list of packages
      apt:
        pkg:
        - net-tools
        - dphys-swapfile
        - git
        - python3-pip

    - name: Download Firewall Fix Script
      get_url: url=https://raw.githubusercontent.com/theAkito/rancher-helpers/master/scripts/debian-buster_fix.sh dest=/tmp/debian-buster_fix.sh

    - name: Make script executeable.
      shell: chmod +x /tmp/debian-buster_fix.sh
      args:
        warn: no

    - name: Execute the Firewall Fix
      shell: /tmp/debian-buster_fix.sh

    - name: Remove the Firewall Fix
      file: path=/tmp/debian-buster_fix.sh state=absent

    - name: Set timezone to Europe/Berlin
      community.general.timezone:
        name: Europe/Berlin

    - name: Set GPU mem to Minimum
      shell: |
            cat <<EOF | sudo tee -a /boot/firmware/usercfg.txt
            gpu_mem=16
            EOF
            exit 0

    - name: Set cgroup
      shell: sh -c 'echo $(cat /boot/firmware/cmdline.txt) "cgroup_enable=cpuset cgroup_enable=memory cgroup_memory=1" > /boot/firmware/cmdline.txt'

    - name: Enable System ipv4 and ipv6 forwading.
      shell: |
            cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
            net.bridge.bridge-nf-call-ip6tables = 1
            net.bridge.bridge-nf-call-iptables = 1
            net.ipv4.ip_forward=1
            net.ipv6.conf.all.forwarding=1
            EOF
            exit 0

    - name: Apply System Changes.
      shell: sysctl --system

    - name: "Build hosts file"
      lineinfile:
        dest=/etc/hosts
        regexp='.*{{ item }}$'
        line="{{ hostvars[item]['ansible_host'] }} {{item}}"
        state=present
      when: hostvars[item]['ansible_host'] is defined
      with_items:
        - "{{ groups['all'] }}"

    - name: Change the hostname to our standard
      hostname:
        name="{{ inventory_hostname }}"
      when:
        ansible_fqdn != ansible_ssh_host

    - name: Reboot the server.
      reboot:
        msg: "Reboot initiated by Ansible due make Hostname aktive."
        connect_timeout: 5
        reboot_timeout: 3600
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime

    - name: Validate ansible_fqdn == inventory_hostname
      tags:
        - validate
      assert:
        that:
          ansible_fqdn == inventory_hostname

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb [arch=arm64] https://download.docker.com/linux/ubuntu groovy stable
        state: present

    - name: Update apt and install docker-ce
      apt: update_cache=yes name=docker-ce state=latest

    - name: Install Docker Module for Python
      pip:
        name: docker

    - name: add Sudo to docker.
      shell: sudo usermod -aG docker ubuntu
      args:
        warn: no


    - name: Set up the Docker daemon for autostart.
      shell: |
            sh -c 'cat > /etc/docker/daemon.json <<EOF
            {
            "exec-opts": ["native.cgroupdriver=systemd"],
            "log-driver": "json-file",
            "log-opts": {
            "max-size": "100m"
            },
            "storage-driver": "overlay2"
            }
            EOF'
            exit 0

    - name: Start Docker Demon.
      shell: mkdir -p /etc/systemd/system/docker.service.d && systemctl enable docker && systemctl restart docker
      args:
        warn: no

    - name: Start Docker Demon.
      shell: swapoff -a && dphys-swapfile swapoff && dphys-swapfile uninstall && systemctl disable dphys-swapfile

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Add Kubernetes Repository
      apt_repository:
        repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
        state: present

    - name: Update apt and install docker-ce
      apt:
        update_cache: yes
        pkg:
        - kubelet
        - kubeadm
        - kubectl
